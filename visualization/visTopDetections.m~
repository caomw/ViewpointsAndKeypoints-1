function [] = visTopDetections(class)
%VISTOPDETECTIONS Summary of this function goes here
%   Detailed explanation goes here


% Declaring global variables
globals;
% Name of the directory where detection results are stored
proto = 'vggJointVps';suff = '';
dataStructsDir = fullfile(cachedir,['rcnnDetectionPredsVps'],[proto suff]);
% Load the detections
load(fullfile(dataStructsDir,'allDets.mat'));
% Load detection data structs corresponding to the class of interest
cInd = pascalClassIndex(class);
cands = dataStructs(cInd);

% Get the names of the validation images
pascalValNamesFile = fullfile(cachedir,'voc_val_names.mat');
valNames = load(pascalValNamesFile);
valNames = valNames.val_names;
cands.voc_ids = cell(size(cands.boxes));

% Path to directory containing CAD models
CADPath = fullfile(PASCAL3Ddir,'CAD',class);
% Load the CAD models available for the current class
cad = load(CADPath);
cad = cad.(class);
% Get the vertices and faces from the first CAD model
vertices = cad(1).vertices;
faces = cad(1).faces;

% For each validation instance, create a voc_ids field in the cands struct
for i = 1:length(valNames)
    cands.voc_ids{i} = valNames(i*ones(size(cands.boxes{i},1),1));
end

% Concatenate all bboxes
boxes = vertcat(cands.boxes{:});
% The fifth entry of each bbox detection corresponds to the score. Get
% scores for all detections.
scores = boxes(:,5);
% Sort scores in the descending order
[scores,perm] = sort(scores,'descend');

% Store boxes in the
boxes = boxes(perm,1:4);
feat = vertcat(cands.feat{:});
feat = feat(perm,:);
ids = vertcat(cands.voc_ids{:});
ids = ids(perm);

preds = poseHypotheses(feat,1,0);
preds = preds{1};
eulersPred = decodePose(preds,params.angleEncoding);
rotX = diag([1 -1 -1]);

%for i=1:length(ids)
for i = 1:100
    disp( ids{i})
    im = imread([pascalImagesDir '/' ids{i} '.jpg']);
    subplot(1,2,1);
    showboxes(im,boxes(i,:));
    axis image;
    subplot(1,2,2);
    
    euler = eulersPred(i,:);
    R = angle2dcm(euler(1), euler(2)-pi/2, -euler(3),'ZXZ');
    R = rotX*R';
    verticesP = R*vertices';
    verticesP = verticesP';
    trisurf(faces,verticesP(:,1),verticesP(:,2),verticesP(:,3));axis equal;view(0,-90);
    title(num2str(scores(i)));    
    pause();close all;
end

end

